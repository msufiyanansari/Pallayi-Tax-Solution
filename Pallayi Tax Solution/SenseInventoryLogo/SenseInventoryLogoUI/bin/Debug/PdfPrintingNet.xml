<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PdfPrintingNet</name>
    </assembly>
    <members>
        <member name="T:PdfPrintingNet.MultiPdfDocumentPrintSettings">
            <summary>
            Settings for printing multiple documents as single printer job.
            </summary>
        </member>
        <member name="M:PdfPrintingNet.MultiPdfDocumentPrintSettings.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="jobName">Printer job name</param>
        </member>
        <member name="M:PdfPrintingNet.MultiPdfDocumentPrintSettings.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:PdfPrintingNet.MultiPdfDocumentPrintSettings.Dispose">
            <summary>
            Dispose and clean.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.MultiPdfDocumentPrintSettings.JobName">
            <summary>
            Printer Job Name
            </summary>
        </member>
        <member name="P:PdfPrintingNet.MultiPdfDocumentPrintSettings.DocumentList">
            <summary>
            List of PDF Document (and printing settings) which will be printed as single printer job.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.SinglePdfDocumentPrintSettings">
            <summary>
            Settings for printing single PDF document. To be used with MultiPdfDocumentPrintSettings
            </summary>
        </member>
        <member name="M:PdfPrintingNet.SinglePdfDocumentPrintSettings.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:PdfPrintingNet.SinglePdfDocumentPrintSettings.Dispose">
            <summary>
            Dispose and clean.
            </summary>
        </member>
        <member name="M:PdfPrintingNet.SinglePdfDocumentPrintSettings.#ctor(System.String,System.String)">
            <summary>
            Print settings for single PDF document.
            </summary>
            <param name="fileName">File name of PDF document</param>
            <param name="password">PDF password (if PDF document is password protected) </param>
        </member>
        <member name="M:PdfPrintingNet.SinglePdfDocumentPrintSettings.#ctor(System.Byte[],System.String)">
            <summary>
            Print settings for single PDF document.
            </summary>
            <param name="fileContent">PDF content</param>
            <param name="password">PDF password (if PDF document is password protected) </param>
        </member>
        <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PrinterSettings">
            <summary>
            PrinterSettings used for printing PDF Document
            </summary>
        </member>
        <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.Password">
            <summary>
            Password of PDFDocument
            </summary>
        </member>
        <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.Pages">
            <summary>
            List of pages to be printed. If empty, all pages will be printed.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.RangeType">
            <summary>
            Print just Even, just Odd or both type of pages.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PrintInColor">
            <summary>
            Print in color?
            </summary>
        </member>
        <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.IsLandscape">
            <summary>
            Is landscape?
            </summary>
        </member>
        <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.IsAutoRotate">
            <summary>
            Autorate content to portrait / landscape based on content and paper size?
            </summary>
        </member>
        <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.IsContentCentered">
            <summary>
            Center content?
            </summary>
        </member>
        <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PaperSize">
            <summary>
            Printing paper size 
            </summary>
        </member>
        <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PaperSource">
            <summary>
            Printing Paper source
            </summary>
        </member>
        <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.PrinterResolution">
            <summary>
            Printing Printer resolution
            </summary>
        </member>
        <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.Scale">
            <summary>
            Content scaling - None, Fit to margins or Shrink to margins
            </summary>
        </member>
        <member name="P:PdfPrintingNet.SinglePdfDocumentPrintSettings.Watermark">
            <summary>
            Watermak to be added.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfEnum.FPDF_PAGE_OBJECT_TYPE.PDFPAGE_TEXT">
            <summary>
            Text object
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfEnum.FPDF_PAGE_OBJECT_TYPE.PDFPAGE_PATH">
            <summary>
            Path object
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfEnum.FPDF_PAGE_OBJECT_TYPE.PDFPAGE_IMAGE">
            <summary>
            Image object
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfEnum.FPDF_PAGE_OBJECT_TYPE.PDFPAGE_SHADING">
            <summary>
            Shading object
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfEnum.FPDF_PAGE_OBJECT_TYPE.PDFPAGE_FORM">
            <summary>
            Page form object
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfEnum.FPDF_PAGE_OBJECT_TYPE.PDFPAGE_INLINES">
            <summary>
            Inline object
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfOpenFileStatus">
            <summary>
            Status of Pdf open file
            </summary>
        </member>
        <member name="M:PdfPrintingNet.PdfOpenFileStatus.#ctor(PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult,System.String)">
            <summary>
            Initializes a new instance of the PdfOpenFileStatus class.
            </summary>
            <param name="result">The result.</param>
            <param name="status">The status.</param>
        </member>
        <member name="P:PdfPrintingNet.PdfOpenFileStatus.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfOpenFileStatus.Result">
            <summary>
            Gets or sets the result.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult">
            <summary>
            Result of Pdf open file
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.OK">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.PasswordRequired">
            <summary>
            Password required
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.InvalidPassword">
            <summary>
            Invalid password
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.InvalidPDFFile">
            <summary>
            Invalid PDF file
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.FileDoesntExist">
            <summary>
            File doesnt exist
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.Cancelled">
            <summary>
            Cancelled
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfOpenFileStatus.PdfOpenFileResult.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfSaveFileStatus">
            <summary>
            Status of Pdf open file
            </summary>
        </member>
        <member name="M:PdfPrintingNet.PdfSaveFileStatus.#ctor(PdfPrintingNet.PdfSaveFileStatus.PdfSaveFileResult,System.String)">
            <summary>
            Initializes a new instance of the PdfSaveFileStatus class.
            </summary>
            <param name="result">The result</param>
            <param name="status">The status</param>
        </member>
        <member name="P:PdfPrintingNet.PdfSaveFileStatus.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfSaveFileStatus.Result">
            <summary>
            Gets or sets the result.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfSaveFileStatus.PdfSaveFileResult">
            <summary>
            Result of Pdf open file
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfSaveFileStatus.PdfSaveFileResult.OK">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfSaveFileStatus.PdfSaveFileResult.Cancelled">
            <summary>
            Cancelled
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfSaveFileStatus.PdfSaveFileResult.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:PdfPrintingNet.DocumentPermissions">
            <summary>
            Document Permissions
            </summary>
        </member>
        <member name="P:PdfPrintingNet.DocumentPermissions.Print">
            <summary>
            Gets or sets a value indicating whether print is allowed.
            </summary>        
            <value>
              True if modify is allowed; otherwise, False.
            </value>
        </member>
        <member name="P:PdfPrintingNet.DocumentPermissions.Modify">
            <summary>
            Gets or sets a value indicating whether modify is allowed.
            </summary>
            <value>
              True if modify is allowed; otherwise, False.
            </value>
        </member>
        <member name="P:PdfPrintingNet.DocumentPermissions.Annotations">
            <summary>
            Gets or sets a value indicating whether adding annotations is allowed.
            </summary>
            <value>
              True if annotations are allowed; otherwise, False.
            </value>
        </member>
        <member name="P:PdfPrintingNet.DocumentPermissions.AssembleDocument">
            <summary>
            Gets or sets a value indicating whether assemble document is allowed.
            </summary>
            <value>
              True if assemble document is allowed; otherwise, False.
            </value>
        </member>
        <member name="P:PdfPrintingNet.DocumentPermissions.ExtractContent">
            <summary>
            Gets or sets a value indicating whether extract content is allowed.
            </summary>
            <value>
              True if extract content is allowed; otherwise, False.
            </value>
        </member>
        <member name="P:PdfPrintingNet.DocumentPermissions.ExtractContentAccessibility">
            <summary>
            Gets or sets a value indicating whether extract content accessibility is allowed.
            </summary>
            <value>
            True if extract content accessibility is allowed; otherwise, False.
            </value>
        </member>
        <member name="P:PdfPrintingNet.DocumentPermissions.FormFill">
            <summary>
            Gets or sets a value indicating whether form fill is allowed.
            </summary>
            <value>
              True if form fill is allowed; otherwise, False.
            </value>
        </member>
        <member name="P:PdfPrintingNet.DocumentPermissions.FullQualityPrint">
            <summary>
            Gets or sets a value indicating whether full quality print is allowed.
            </summary>
            <value>
              True if full quality print is allowed; otherwise, false.
            </value>
        </member>
        <member name="F:PdfPrintingNet.FPDF_PAGE_OBJECT_TYPE.PDFPAGE_TEXT">
            <summary>
            Text object
            </summary>
        </member>
        <member name="F:PdfPrintingNet.FPDF_PAGE_OBJECT_TYPE.PDFPAGE_PATH">
            <summary>
            Path object
            </summary>
        </member>
        <member name="F:PdfPrintingNet.FPDF_PAGE_OBJECT_TYPE.PDFPAGE_IMAGE">
            <summary>
            Image object
            </summary>
        </member>
        <member name="F:PdfPrintingNet.FPDF_PAGE_OBJECT_TYPE.PDFPAGE_SHADING">
            <summary>
            Shading object
            </summary>
        </member>
        <member name="F:PdfPrintingNet.FPDF_PAGE_OBJECT_TYPE.PDFPAGE_FORM">
            <summary>
            Page form object
            </summary>
        </member>
        <member name="F:PdfPrintingNet.FPDF_PAGE_OBJECT_TYPE.PDFPAGE_INLINES">
            <summary>
            Inline object
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfPageLink">
            <summary>
            Describes a link on a page.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint">
            <summary>
            PdfPrint
            </summary>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.CancelCurrentPrinting">
            <summary>
            Cancels the current printing.
            </summary>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.#ctor(System.String,System.String)">
            <summary>
            Creates the PDFPrint object. If company name or license key is empty string or company name / license keys are not valid, it will behave as demo.
            </summary>
            <param name="companyName">Company name of the license owner.</param>
            <param name="licenseKey">License key</param>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetText(System.String,System.Int32)">
            <summary>
            Return text from PDF page.
            </summary>
            <param name="fileName">PDF file name</param>        
            <param name="pageNumber">PDF page number</param>  
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetText(System.String,System.String,System.Int32)">
            <summary>
            Return text from PDF page.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="password">Password - pdf file password. </param>      
            <param name="pageNumber">PDF page number</param>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetText(System.Byte[],System.Int32)">
            <summary>
            Return text from PDF page.
            </summary>
            <param name="pdfArray">PDF content</param>       
            <param name="pageNumber">PDF page number</param>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetText(System.Byte[],System.String,System.Int32)">
            <summary>
            Return text from PDF page.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="password">Password - pdf file password. </param>        
            <param name="pageNumber">PDF page number</param>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetPdfPageSize(System.String,System.Int32)">
            <summary>
            Returns the width and height(in inches) of the page in the PDF file.
            </summary>        
            <param name="fileName">PDF file name</param>        
            <param name="pageNumber">PDF page number</param>
            <returns>Width and height (in inches) of selected page, exception in case of error.</returns>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetPdfPageSize(System.String,System.Int32,System.String)">
            <summary>
            Returns the width and height(in inches) of the page in the PDF file.
            </summary>        
            <param name="fileName">PDF file name</param>        
            <param name="pageNumber">PDF page number</param>
            <param name="password">Password - pdf file password. </param>
            <returns>Width and height (in inches) of selected page, exception in case of error.</returns>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetPdfPageSize(System.Byte[],System.Int32)">
            <summary>
            Returns the width and height(in inches) of the page in the PDF file.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="pageNumber">PDF page number</param>        
            <returns>Width and height (in inches) of selected page, exception in case of error.</returns>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetPdfPageSize(System.Byte[],System.Int32,System.String)">
            <summary>
            Returns the width and height(in inches) of the page in the PDF file.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="pageNumber">PDF page number</param>
            <param name="password">Password - pdf file password. </param>
            <returns>Width and height (in inches) of selected page, exception in case of error.</returns>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetNumberOfPages(System.String)">
            <summary>
            Returns the number of pages in the PDF file.
            <param name="fileName">PDF file name</param>        
            <returns>Number of pages in the PDF file, exception in case of error.</returns>
            </summary>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetNumberOfPages(System.String,System.String)">
            <summary>
            Returns the number of pages in the PDF file.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="password">Password - pdf file password. </param>
            <returns>Number of pages in the PDF file, exception in case of error.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetNumberOfPages(System.Byte[])">
            <summary>
            Returns the number of pages in the PDF document.
            </summary>
            <param name="pdfArray">PDF content</param>
            <returns>Number of pages in the PDF document, exception in case of error.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetNumberOfPages(System.Byte[],System.String)">
            <summary>
            Returns the number of pages in the PDF document.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="password">Password - pdf document password </param>
            <returns>Number of pages in the PDF document, exception in case of error.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>        
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>        
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>        
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>                
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int32)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>                
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int32,System.String)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>                
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>
            <param name="password">PDF Password - pdf file password</param>
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int32,System.String,PdfPrintingNet.PdfPrint.ImageType)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>                
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>
            <param name="password">PDF Password - pdf file password</param>
            <param name="imageType">Image type of output image file</param>
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType,System.Boolean)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>
            <param name="password">PDF Password - pdf file password</param>
            <param name="imageType">Image type of output image file</param>
            <param name="checkPDFFile">Check if PDF file and page number is valid</param>
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>        
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>        
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>
            <param name="password">PDF Password - pdf file password</param>        
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>
            <param name="password">PDF Password - pdf file password</param>
            <param name="imageType">Image type of output image file</param>        
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPageAsImage(System.Byte[],System.String,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType,System.Boolean)">
            <summary>
            Saves pdf page as an image. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Output image file name</param>
            <param name="pageNumber">PDF page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF.</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>
            <param name="password">PDF Password - pdf file password</param>
            <param name="imageType">Image type of output image file</param>
            <param name="checkPDFFile">Check if PDF file and page number is valid</param>
            <returns>Status, if unexpected error returns exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String)">
            <summary>
            Saves all pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>        
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32)">
            <summary>
            Saves multiple pdf pages as images starting with fromPage. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page</param>        
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Saves multiple pdf pages as images in the range fromPage and toPage. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>        
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType)">
            <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>        
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64)">
            <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String)">
            <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>
            <param name="password">PDF Password - if pdf file is password protected.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType)">
            <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>
            <param name="password">PDF Password - if pdf file is password protected.</param>
            <param name="imageType">Image type of output image file.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String)">
            <summary>
            Saves all pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32)">
            <summary>
            Saves pdf pages as images from page. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG. 
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType)">
            <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64)">
            <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String)">
            <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>
            <param name="password">PDF Password - if pdf file is password protected.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsImages(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.Int64,System.String,PdfPrintingNet.PdfPrint.ImageType)">
            <summary>
            Saves multiple pdf pages as images. Supported image types are BMP, TIFF, GIF, JPG/JPEG and PNG.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
            <param name="quality">Image quality in % (between 0 and 100)</param>
            <param name="password">PDF Password - if pdf file is password protected.</param>
            <param name="imageType">Image type of output image file.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String)">
            <summary>
            Saves all PDF pages in one multipage tiff file.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32)">
            <summary>
            Saves PDF pages starting with fromPage in one multipage tiff file.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>        
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Saves PDF pages in one multipage tiff file.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Saves PDF pages in one multipage tiff file.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Saves PDF pages in one multipage tiff file.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType)">
            <summary>
            Saves PDF pages in one multipage tiff file.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.String)">
            <summary>
            Saves PDF pages in one multipage tiff file.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
            <param name="password">PDF Password - if pdf file is password protected.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.String,PdfPrintingNet.PdfPrint.TiffCompression)">
            <summary>
            Saves PDF pages in one multipage tiff file.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
            <param name="password">PDF Password - if pdf file is password protected.</param>
            <param name="tiffCompression">TiffCompression - Compression used in Tiff image.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String)">
            <summary>
            Saves all PDF pages in one multipage tiff file.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32)">
            <summary>
            Saves PDF pages starting with fromPage in one multipage tiff file.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>        
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
            Saves PDF pages in one multipage tiff file.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>        
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Saves PDF pages in one multipage tiff file.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Saves PDF pages in one multipage tiff file.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>        
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType)">
            <summary>
            Saves PDF pages in one multipage tiff file.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.String)">
            <summary>
            Saves PDF pages in one multipage tiff file.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
            <param name="password">PDF Password - if pdf file is password protected.</param>    
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SavePdfPagesAsMultiPageTiff(System.Byte[],System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfPrint.ColorType,System.String,PdfPrintingNet.PdfPrint.TiffCompression)">
            <summary>
            Saves PDF pages in one multipage tiff file.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="outputFileName">Image output file name</param>
            <param name="fromPage">From PDF page.</param>
            <param name="toPage">To PDF page.</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xResolution">X Resolution of the output image.</param>
            <param name="yResolution">Y resolution of the output image.</param>
            <param name="colorType">Color type - BW, Gray, Color, Same as in the PDF</param>
            <param name="password">PDF Password - if pdf file is password protected.</param>    
            <param name="tiffCompression">TiffCompression - Compression used in Tiff image.</param>    
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.IsPasswordProtected(System.String)">
            <summary>
            Checks if the PDF file is password protected.
            </summary>
            <param name="fileName">PDF file name</param>
            <returns>True if PDF file is password protected, otherwise false.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.IsPasswordProtected(System.Byte[])">
            <summary>
            Checks if the PDF file is password protected.
            </summary>
            <param name="pdfArray">PDF byte array content</param>
            <returns>True if PDF file is password protected, otherwise false.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.IsSupportedFileInternal(System.String)">
            <summary>
            Checks if the file is a valid PDF.
            </summary>
            <param name="fileName">PDF file name</param>
            <returns>True if the file is a valid PDF, otherwise false.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.IsSupportedFile(System.String)">
            <summary>
            Checks if the file is a valid PDF
            </summary>
            <param name="fileName">PDF file name</param>
            <returns>True if the file is a valid PDF, otherwise false.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.IsSupportedFileInternal(System.Byte[])">
            <summary>
            Checks if the file is a valid PDF.
            </summary>
            <param name="pdfArray">PDF content</param>
            <returns>True if the file is a valid PDF, otherwise false.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.IsSupportedFile(System.Byte[])">
            <summary>
            Checks if the file is a valid PDF.
            </summary>
            <param name="pdfArray">PDF content</param>
            <returns>True if the file is a valid PDF, otherwise false.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.IsValidPassword(System.String,System.String)">
            <summary>
            Checks if the password is valid.
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="password">PDF password</param>
            <returns>True if the password is valid, otherwise false.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.IsValidPassword(System.Byte[],System.String)">
            <summary>
            Checks if the password is valid.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="password">PDF password</param>
            <returns>True if the password is valid, otherwise false.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="fileName">PDF filename</param>
            <param name="pageNumber">Page number</param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="fileName">PDF filename</param>
            <param name="pageNumber">Page number</param>
            <param name="xDPI">X DPI resolution</param>
            <param name="yDPI">Y DPI resolution</param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="fileName">PDF filename</param>
            <param name="pageNumber">Page number</param>
            <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="fileName">PDF filename</param>
            <param name="pageNumber">Page number</param>
            <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="xDPI">X DPI resolution</param>
            <param name="yDPI">Y DPI resolution</param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="pageNumber">Page number</param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="pageNumber">Page number</param>
            <param name="xDPI">X DPI resolution</param>
            <param name="yDPI">Y DPI resolution</param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="fileName">PDF filename</param>
            <param name="pageNumber">Page number</param>
            <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="password">PDF password - pdf file password.</param>        
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="fileName">PDF filename</param>
            <param name="pageNumber">Page number</param>
            <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="password">PDF password - pdf file password.</param>
            <param name="xDPI">X DPI resolution</param>
            <param name="yDPI">Y DPI resolution</param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="fileName">PDF filename</param>
            <param name="pageNumber">Page number</param>
            <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="password">PDF password (optional) - if pdf file is password protected.</param>
            <param name="checkPDFFile">Check if PDF file and page number is valid. </param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="fileName">PDF filename</param>
            <param name="pageNumber">Page number</param>
            <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. Value 5 is the closest one to original PDF page size.</param>
            <param name="password">PDF password (optional) - if pdf file is password protected.</param>
            <param name="checkPDFFile">Check if PDF file and page number is valid. </param>
            <param name="xDPI">X DPI resolution</param>
            <param name="yDPI">Y DPI resolution</param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="pageNumber">Page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.</param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="pageNumber">Page number</param>
            <param name="zoomFactor">Zoom factor. Valid values from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.</param>
            <param name="xDPI">X DPI resolution</param>
            <param name="yDPI">Y DPI resolution</param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="pageNumber">Page number</param>
            <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.</param>
            <param name="password">PDF password - pdf file password. </param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="pageNumber">Page number</param>
            <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.</param>
            <param name="xDPI">X DPI resolution</param>
            <param name="yDPI">Y DPI resolution</param>
            <param name="password">PDF password - pdf file password. </param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="pageNumber">Page number</param>
            <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.</param>
            <param name="password">PDF password - pdf file password. </param>
            <param name="checkPDFFile">Check if PDF file and page number is valid.</param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.GetBitmapFromPdfPage(System.Byte[],System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Returns bitmap from the pdf page.
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="pageNumber">Page number</param>
            <param name="zoomFactor">Zoom factor. Valid values are from 1 to 10. If omitted value 5 is used. Value 5 is the closest one to original PDF page size.</param>
            <param name="password">PDF password - pdf file password. </param>
            <param name="checkPDFFile">Check if PDF file and page number is valid.</param>
            <param name="xDPI">X DPI resolution</param>
            <param name="yDPI">Y DPI resolution</param>
            <returns>Bitmap if everything is OK, exception if something went wrong </returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,PdfPrintingNet.PdfWatermark)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>        
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,PdfPrintingNet.PdfWatermark,System.String)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>        
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <param name="printerJobName">Printer job name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Boolean)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.String)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="password">Password - pdf file password. </param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.String,System.String)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="password">Password - pdf file password. </param>
            <param name="printerJobName">Printer job name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.String,PdfPrintingNet.PdfWatermark)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="password">Password - pdf file password. </param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.String,PdfPrintingNet.PdfWatermark,System.String)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="password">Password - pdf file password. </param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <param name="printerJobName">Printer job name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.String,System.Boolean)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="password">Password - pdf file password. </param>
            <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[])">
            <summary>
            Prints the PDF file from byte array
            </summary>
            <param name="pdfArray">PDF content</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],PdfPrintingNet.PdfWatermark)">
            <summary>
            Prints the PDF file from byte array
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],PdfPrintingNet.PdfWatermark,System.String)">
            <summary>
            Prints the PDF file from byte array
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <param name="printerJobName">Printer job name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Boolean)">
            <summary>
            Prints the PDF file from byte array
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.String)">
            <summary>
            Prints the PDF file from byte array
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="password">Password - pdf file password.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.String,PdfPrintingNet.PdfWatermark)">
            <summary>
            Prints the PDF file from byte array
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="password">Password - pdf file password.</param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.String,System.Boolean)">
            <summary>
            Prints the PDF file from byte array
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="password">Password - pdf file password.</param>        
            <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.String,System.String)">
            <summary>
            Prints the PDF file from byte array
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="password">Password - pdf file password</param>
            <param name="printerJobName">Printer job name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.String,System.String,PdfPrintingNet.PdfWatermark)">
            <summary>
            Prints the PDF file from byte array
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="password">Password - pdf file password</param>
            <param name="printerJobName">Printer job name</param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.String,System.String,System.Boolean)">
            <summary>
            Prints the PDF file from byte array
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="password">Password - pdf file password</param>
            <param name="printerJobName">Printer job name</param>
            <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="printerSettings">Printer settings</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,System.String)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="printerSettings">Printer settings</param>
            <param name="password">Password - pdf file password</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,PdfPrintingNet.PdfWatermark)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="printerSettings">Printer settings</param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>               
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,PdfPrintingNet.PdfWatermark,System.String)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="printerSettings">Printer settings</param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>               
            <param name="printerJobName">Printer job name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,System.Boolean)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="printerSettings">Printer settings</param>
            <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,System.String,System.String)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="printerSettings">Printer settings</param>
            <param name="password">Password - pdf file password</param>
            <param name="printerJobName">Printer job name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,System.String,PdfPrintingNet.PdfWatermark)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="printerSettings">Printer settings</param>
            <param name="password">Password - pdf file password</param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,System.String,PdfPrintingNet.PdfWatermark,System.String)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="printerSettings">Printer settings</param>
            <param name="password">Password - pdf file password</param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <param name="printerJobName">Printer job name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.String,System.Drawing.Printing.PrinterSettings,System.String,System.Boolean)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="fileName">PDF file name</param>
            <param name="printerSettings">Printer settings</param>
            <param name="password">Password - pdf file password</param>
            <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="printerSettings">Printer settings</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,PdfPrintingNet.PdfWatermark)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="printerSettings">Printer settings</param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,PdfPrintingNet.PdfWatermark,System.String)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="printerSettings">Printer settings</param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <param name="printerJobName">Printer job name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.Boolean)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="printerSettings">Printer settings</param>
            <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.String)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="printerSettings">Printer settings</param>
            <param name="password">Password - pdf file password </param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.String,PdfPrintingNet.PdfWatermark)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="printerSettings">Printer settings</param>
            <param name="password">Password - pdf file password </param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.String,System.Boolean)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="printerSettings">Printer settings</param>
            <param name="password">Password - pdf file password </param>
            <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.String,System.String)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="printerSettings">Printer settings</param>
            <param name="password">Password - pdf file password </param>
            <param name="printerJobName">Printer job name</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.String,System.String,PdfPrintingNet.PdfWatermark)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="printerSettings">Printer settings</param>
            <param name="password">Password - pdf file password </param>
            <param name="printerJobName">Printer job name</param>
            <param name="watermark">PdfWatermark to be displayed on printed page.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(System.Byte[],System.Drawing.Printing.PrinterSettings,System.String,System.String,System.Boolean)">
            <summary>
            Prints the PDF file
            </summary>
            <param name="pdfArray">PDF content</param>
            <param name="printerSettings">Printer settings</param>
            <param name="password">Password - pdf file password </param>
            <param name="printerJobName">Printer job name</param>
            <param name="renderBeforePrint">Document will be rendered before printing. From version 2.9.7.3 this parameter is ignored.</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.OnDocumentPrintPageBegin(PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs)">
            <summary>
            Raises the DocumentPrintPageBegin event.
            </summary>
            <param name="e">DocumentPrintPageEventArgs instance containing the event data.</param>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.OnDocumentPrintPageEnd(PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs)">
            <summary>
            Raises the DocumentPrintPageEnd event.
            </summary>
            <param name="e">DocumentPrintPageEventArgs instance containing the event data.</param>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.OnDocumentPrintBegin(PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs)">
            <summary>
            Raises the DocumentPrintBegin event.
            </summary>
            <param name="e">The DocumentPrintBeginEventArgs instance containing the event data.</param>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.OnDocumentPrintEnd(PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs)">
            <summary>
            Raises the DocumentPrintEnd event.
            </summary>
            <param name="e">DocumentPrintEndEventArgs instance containing the event data.</param>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.OnMultiDocumentPrintPageBegin(PdfPrintingNet.PdfPrint.MultiDocumentPrintPageEventArgs)">
            <summary>
            Raises the MultiDocumentPrintPageBegin event.
            </summary>
            <param name="e">MultiDocumentPrintPageEventArgs instance containing the event data.</param>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.OnMultiDocumentPrintPageEnd(PdfPrintingNet.PdfPrint.MultiDocumentPrintPageEventArgs)">
            <summary>
            Raises the MultiDocumentPrintPageEnd event.
            </summary>
            <param name="e">MultiDocumentPrintPageEventArgs instance containing the event data.</param>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.OnMultiDocumentPrintBegin(PdfPrintingNet.PdfPrint.MultiDocumentPrintBeginEventArgs)">
            <summary>
            Raises the MultiDocumentPrintBegin event.
            </summary>
            <param name="e">MultiDocumentPrintBeginEventArgs instance containing the event data.</param>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.OnMultiDocumentPrintEnd(PdfPrintingNet.PdfPrint.MultiDocumentPrintEndEventArgs)">
            <summary>
            Raises the MultiDocumentPrintEnd event.
            </summary>
            <param name="e">MultiDocumentPrintEndEventArgs instance containing the event data.</param>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.OnSingleDocumentPrintBegin(PdfPrintingNet.PdfPrint.SingleDocumentPrintBeginEventArgs)">
            <summary>
            Raises the SingleDocumentPrintBegin event.
            </summary>
            <param name="e">SingleDocumentPrintBeginEventArgs instance containing the event data.</param>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.OnSingleDocumentPrintEnd(PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs)">
            <summary>
            Raises the SingleDocumentPrintEnd event.
            </summary>
            <param name="e">SingleDocumentPrintEndEventArgs instance containing the event data.</param>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.Print(PdfPrintingNet.MultiPdfDocumentPrintSettings)">
            <summary>
            Prints one or more PDF file as single print job
            </summary>
            <param name="multiDocument">Multi document PDF print settings</param>
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.PrintWithAdobe(System.String)">
            <summary>
            Prints the PDF file by sillently using Adobe
            </summary>
            <param name="fileName">Full path of PDF file name</param>        
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.PrintWithAdobe(System.String,System.String@)">
            <summary>
            Prints the PDF file by sillently using Adobe
            </summary>
            <param name="fileName">Full path of PDF file name</param>        
            <param name="resultMessage">Result message</param>     
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.PrintWithAdobe(System.String,System.Drawing.Printing.PrinterSettings)">
            <summary>
            Prints the PDF file by sillently using Adobe
            </summary>
            <param name="fileName">Full path of PDF file name</param>        
            <param name="printerSettings">Printer settings</param>        
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.PrintWithAdobe(System.String,System.Drawing.Printing.PrinterSettings,System.String@)">
            <summary>
            Prints the PDF file by sillently using Adobe
            </summary>
            <param name="fileName">Full path of PDF file name</param>     
            <param name="printerSettings">Printer settings</param>
            <param name="resultMessage">Result message</param>        
            <returns>Status - in case of an unexpected error it throws an exception.</returns>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.IsContentCentered">
            <summary>
            If set to true, it will center content in standard Print method. It doesn't have effect in PrintWithAdobe method.
            Default value is True.        
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.Watermark">
            <summary>
            Watermark to be printed (it can be Image or Text).
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.Collate">
            <summary>
            If set to true, it will collate the pages.
            If set to false, it will not collate the pages.
            If not set, it will use the printer default settings.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.PrinterName">
            <summary>
            Name of the printer used for printing.
            If not set, it will use the default printer.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.LogFile">
            <summary>
            Name of the log file. Mostly used for debuging.
            If not set, it will not log
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.LogLevel">
            <summary>
            Log Level
            Ignored if LogFile is not set.
            Possible values: 0 (Error logging) and 1 (full logging).
            Default = 0
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.Scale">
            <summary>
            If set, it will scale the page according to the chosen scale type.
            If not set, it will use the Shrink scaling type.
            If PrintWithAdobe method both Shrink and FitToMargins behaves like Shrink.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.Pages">
            <summary>
            Defines the pages that are to be printed.
            If not set, it wil print all pages.
            If PrintWithAdobe method is used, Pages can't have more than one interval defined.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.Copies">
            <summary>
            Set the number of copies to be printed.
            If not selected, it will use the printer default settings.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.DuplexType">
            <summary>
            Duplex type used in printing.
            If not set, it will use the printer default settings.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.SettingDialog">
            <summary>
            Use the printer settings dialog.
            If not set, it will not use the printer settings dialog.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.PrintInColor">
            <summary>
            It set to true, it will print in color.
            If set to false, it will print as grayscale.
            If not set, it will use the printer default settings.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.IsLandscape">
            <summary>
            If set to true, it will print as landscape if IsAutoRotate = false. 
            If set to false, it will print as portrait if IsAutoRotate = false.
            It not set, it will use the printer default settings.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.IsAutoRotate">
            <summary>
            If set to true, it will override selected value for IsLandscape and it will set orientation to landscape or portrait based on the content width / height.
            It not set it, selected value for IsLandscape will be used. 
            It doesn't have effect in PrintWithAdobe method.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.PaperSize">
            <summary>
            What type of paper size to use?
            If not set, it will use the printer default settings.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.PaperSource">
            <summary>
            Paper source used for printing.
            If not set, it will use the printer default settings.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.PrinterResolution">
            <summary>
            Printer resolution used for printing.
            If not set, it will use the printer default settings.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.RangeType">
            <summary>
            Range type.
            It not set, it will print both even and odd pages in the selected range interval.
            </summary>
        </member>
        <member name="E:PdfPrintingNet.PdfPrint.DocumentPrintBegin">
            <summary>
            Occurs when document print begins.
            </summary>
        </member>
        <member name="E:PdfPrintingNet.PdfPrint.DocumentPrintEnd">
            <summary>
            Occurs when document print ends.
            </summary>
        </member>
        <member name="E:PdfPrintingNet.PdfPrint.DocumentPrintPageBegin">
            <summary>
            Occurs when document print page begins.
            </summary>
        </member>
        <member name="E:PdfPrintingNet.PdfPrint.DocumentPrintPageEnd">
            <summary>
            Occurs when document print page ends.
            </summary>
        </member>
        <member name="E:PdfPrintingNet.PdfPrint.MultiDocumentPrintBegin">
            <summary>
            Occurs when multi document print begins.
            </summary>
        </member>
        <member name="E:PdfPrintingNet.PdfPrint.MultiDocumentPrintEnd">
            <summary>
            Occurs when multi document print ends.
            </summary>
        </member>
        <member name="E:PdfPrintingNet.PdfPrint.SingleDocumentPrintBegin">
            <summary>
            Occurs when single document print begins.
            </summary>
        </member>
        <member name="E:PdfPrintingNet.PdfPrint.SingleDocumentPrintEnd">
            <summary>
            Occurs when single document print ends.
            </summary>
        </member>
        <member name="E:PdfPrintingNet.PdfPrint.MultiDocumentPrintPageBegin">
            <summary>
            Occurs when multi document print page begins.
            </summary>
        </member>
        <member name="E:PdfPrintingNet.PdfPrint.MultiDocumentPrintPageEnd">
            <summary>
            Occurs when multi document print page ends.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.ScaleTypes">
            <summary>
            Defines available scale types for the page content.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.ScaleTypes.None">
            <summary>
            No scaling. Uses actual size.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.ScaleTypes.Shrink">
            <summary>
            Shrink to page.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.ScaleTypes.FitToMargins">
            <summary>
            Fit to margins.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.TiffCompression">
            <summary>
            Compression used in Tiff images 
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.TiffCompression.CompressionCCITT3">
            <summary>
            CCCITT4 compression is mostly used for black and white images - 1 bit images.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.TiffCompression.CompressionCCITT4">
            <summary>
            CCCITT4 compression is mostly used for black and white images - 1 bit images.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.TiffCompression.CompressionLZW">
            <summary>
            LZW compression. Default value.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.TiffCompression.CompressionNone">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.Status">
            <summary>
            Status of PDFPrint operation execution
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.OK">
            <summary>
            Everything is OK.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.FILE_DOESNT_EXIST">
            <summary>
            File doesn't exist.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.CANNOT_PRINT_FILE">
            <summary>
            Cannot print file.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.PRINTER_DOESNT_EXIST">
            <summary>
            Printer doesn't exist.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.INVALID_DEVMOD">
            <summary>
            Invalid printer properties structure.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.NOT_AVAILABLE_PRINTER_PROPERTIES">
            <summary>
            Printer properties are not available.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.CANT_INITIALIZE_PRINTER">
            <summary>
            Can't initialize printer.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.PASSWORD_INVALID">
            <summary>
            Invalid password for password protected PDF.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.INVALID_PDF">
            <summary>
            Not a valid PDF file.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.FILENAME_NOT_SET">
            <summary>
            PDF file name not set.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.PASSWORD_NOT_PROVIDED">
            <summary>
            PDF is password protected and password isn't provided.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.UNKNOWN_ERROR">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.INVALID_PRINT_RANGE">
            <summary>
            Invalid print range.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.PAGE_NUMBER_DOESNT_EXIST">
            <summary>
            Page number doesn't exist.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.PRINTING_CANCELLED">
            <summary>
            Printing cancelled.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.INVALID_ADOBE_PRINT_RANGE">
            <summary>
            Invalid adobe print range.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.NOT_32_BIT">
            <summary>
            With Adobe only 32 bit is supported.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.Status.INVALID_IMAGE_TYPE">
            <summary>
            Invalid image type.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.RangeTypes">
            <summary>
            Defines available range options.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.RangeTypes.EvenAndOdd">
            <summary>
            Print even and odd pages within the selected range.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.RangeTypes.JustEven">
            <summary>
            Print only even pages within the selected range.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.RangeTypes.JustOdd">
            <summary>
            Print only odd pages within the selected range.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.ImageType">
            <summary>
            Definies available image types.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.ImageType.FindFromFileName">
            <summary>
            Image type will be determined from the output image file name.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.ImageType.BMP">
            <summary>
            Image type will be BMP.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.ImageType.GIF">
            <summary>
            Image type will be GIF.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.ImageType.JPEG">
            <summary>
            Image type will be JPEG.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.ImageType.PNG">
            <summary>
            Image type will be PNG.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.ImageType.TIFF">
            <summary>
            Image type will be TIFF.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.ColorType">
            <summary>
            ColorType used for converting pdf pages to images.       
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.ColorType.BlackAndWhite">
            <summary>
            Black and white.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.ColorType.GrayScale">
            <summary>
            Grayscale.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.ColorType.Color">
            <summary>
            Color. 
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfPrint.ColorType.Original">
            <summary>
            The same color type as it already is in the pdf page.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo">
            <summary>
            Event Info of MultiDocument printing 
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.JobName">
            <summary>
            Gets or sets the name of the printer job.
            </summary>            
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.CurrentDocumentNumberOfPages">
            <summary>
            Gets or sets the current document number of all pages.
            </summary>            
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.CurrentDocumentNumberOfPagesForPrint">
            <summary>
            Gets or sets the current document number of pages for print.
            </summary>            
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.CurrentDocumentOriginalPageNumber">
            <summary>
            Gets or sets the current document original page number.
            </summary>            
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.CurrentDocumentCurrentPrintPageIndex">
            <summary>
            Gets or sets the index of the current document current print page.
            </summary>            
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.CurrentDocumentIndex">
            <summary>
            Gets or sets the index of the current document.
            </summary>            
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.MultiDocumentCurrentPrintPageIndex">
            <summary>
            Gets or sets the index of the multi document current print page.
            </summary>            
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.NumberOfDocuments">
            <summary>
            Gets or sets the number of documents.
            </summary>            
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.MultiDocumentTotalNumberOfPages">
            <summary>
            Gets or sets the multi document total number of pages.
            </summary>            
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo.MultiDocumentNumberOfPagesForPrint">
            <summary>
            Gets or sets the multi document number of pages for print.
            </summary>            
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs">
            <summary>
            Document Print Begin Event Arguments
            </summary>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs.#ctor(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DocumentPrintBeginEventArgs class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="content">The content.</param>
            <param name="numberOfPagesInDocument">The number of pages in document.</param>
            <param name="numberOfPagesToPrint">The number of pages to print.</param>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs.NumberOfPagesInDocument">
            <summary>
            Gets or sets the number of pages in document.
            </summary>
            <value>
            The number of pages in document.
            </value>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs.NumberOfPagesToPrint">
            <summary>
            Gets or sets the number of pages to print.
            </summary>
            <value>
            The number of pages to print.
            </value>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs">
            <summary>
            Document Print Page Event Arguments
            </summary>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DocumentPrintPageEventArgs class.
            </summary>
            <param name="currentPageIndex">Index of the current page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="totalNumberOfPagesToPrint">The total number of pages to print.</param>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs.CurrentPageIndex">
            <summary>
            Gets or sets the index of the current page.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs.PageNumber">
            <summary>
            Gets or sets the page number.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs.TotalNumberOfPagesToPrint">
            <summary>
            Gets or sets the total number of pages to print.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs">
            <summary>
            Document Print End Event Arguments
            </summary>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.#ctor(System.String,System.Byte[],System.Int32,System.Int32,PdfPrintingNet.PdfPrint.Status)">
            <summary>
            Initializes a new instance of the DocumentPrintEndEventArgs class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="content">The content.</param>
            <param name="numberOfPagesInDocument">The number of pages in document.</param>
            <param name="numberOfPagesPrinted">The number of pages printed.</param>
            <param name="status">The status.</param>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>           
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.Content">
            <summary>
            Gets or sets the content.
            </summary>            
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.NumberOfPagesInDocument">
            <summary>
            Gets or sets the number of pages in document.
            </summary>            
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.NumberOfPagesPrinted">
            <summary>
            Gets or sets the number of pages printed.
            </summary>            
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs.Status">
            <summary>
            Gets or sets the status.
            </summary>            
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.SingleDocumentPrintBeginEventArgs">
            <summary>
            Single Document Print Begin Event Arguments
            </summary>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SingleDocumentPrintBeginEventArgs.#ctor(System.String,System.Byte[],PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo)">
            <summary>
            Initializes a new instance of the SingleDocumentPrintBeginEventArgs class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="content">The content.</param>
            <param name="multiDocPrintEventInfo">The multi document print event information.</param>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintBeginEventArgs.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintBeginEventArgs.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintBeginEventArgs.MultiDocPrintEventInfo">
            <summary>
            Gets or sets the multi document print event information.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs">
            <summary>
            Single Document Print End Event Arguments
            </summary>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs.#ctor(System.String,System.Byte[],PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo,System.Int32,PdfPrintingNet.PdfPrint.Status)">
            <summary>
            Initializes a new instance of the SingleDocumentPrintEndEventArgs class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="content">The content.</param>
            <param name="multiDocPrintEventInfo">The multi document print event information.</param>
            <param name="numberOfPagesPrinted">The number of pages printed.</param>
            <param name="status">The status.</param>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs.MultiDocPrintEventInfo">
            <summary>
            Gets or sets the multi document print event information.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs.NumberOfPagesPrinted">
            <summary>
            Gets or sets the number of pages printed.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.SingleDocumentPrintEndEventArgs.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.MultiDocumentPrintBeginEventArgs">
            <summary>
            Multi Document Print Begin Event Arguments
            </summary>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.MultiDocumentPrintBeginEventArgs.#ctor(PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo)">
            <summary>
            Initializes a new instance of the MultiDocumentPrintBeginEventArgs class.
            </summary>
            <param name="multiDocPrintEventInfo">The multi document print event information.</param>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocumentPrintBeginEventArgs.MultiDocPrintEventInfo">
            <summary>
            Gets or sets the multi document print event information.
            </summary>
            <value>
            The multi document print event information.
            </value>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.MultiDocumentPrintPageEventArgs">
            <summary>
            Multi Document Print Page Event Arguments
            </summary>        
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.MultiDocumentPrintPageEventArgs.#ctor(PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo)">
            <summary>
            Initializes a new instance of the MultiDocumentPrintPageEventArgs class.
            </summary>
            <param name="multiDocPrintEventInfo">The multi document print event information.</param>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocumentPrintPageEventArgs.MultiDocPrintEventInfo">
            <summary>
            Gets or sets the multi document print event information.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfPrint.MultiDocumentPrintEndEventArgs">
            <summary>
            Multi Document Print End Event Arguments
            </summary>
        </member>
        <member name="M:PdfPrintingNet.PdfPrint.MultiDocumentPrintEndEventArgs.#ctor(PdfPrintingNet.PdfPrint.MultiDocPrintEventInfo,System.Int32,PdfPrintingNet.PdfPrint.Status)">
            <summary>
            Initializes a new instance of the MultiDocumentPrintEndEventArgs class.
            </summary>
            <param name="multiDocPrintEventInfo">The multi document print event information.</param>
            <param name="numberOfPagesPrinted">The number of pages printed.</param>
            <param name="status">The status.</param>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocumentPrintEndEventArgs.MultiDocPrintEventInfo">
            <summary>
            Gets or sets the multi document print event information.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocumentPrintEndEventArgs.NumberOfPagesPrinted">
            <summary>
            Gets or sets the number of pages printed.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfPrint.MultiDocumentPrintEndEventArgs.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="F:PdfViewerNet.CustomDropDown.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.CustomDropDown.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.CustomDropDown.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:PdfViewerNet.CustomDropDownPopupForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.CustomDropDownPopupForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.CustomDropDownPopupForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:PdfViewerNet.CustomListBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.CustomListBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.CustomListBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:PdfViewerNet.CustomProgress.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.CustomProgress.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.CustomProgress.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:PdfViewerNet.CustomSearchField.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.CustomSearchField.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.CustomSearchField.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:PdfViewerNet.CustomSearchOptionsPopupForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.CustomSearchOptionsPopupForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.CustomSearchOptionsPopupForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:PdfViewerNet.CustomSeparator.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.CustomSeparator.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.CustomSeparator.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:PdfViewerNet.CustomTextBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.CustomTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.CustomTextBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:PdfViewerNet.CustomToolbar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.CustomToolbar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.CustomToolbar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:PdfViewerNet.CustomButton.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.CustomButton.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.CustomButton.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:PdfViewerNet.DocumentInfoForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.DocumentInfoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.DocumentInfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:PdfViewerNet.PDFPasswordForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PDFPasswordForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.PDFPasswordForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PdfViewerNet.PdfViewer">
            <summary>
            PdfViewer
            </summary>    
        </member>
        <member name="M:PdfViewerNet.PdfViewer.#ctor">
            <summary>
            Constructor for PdfViewer
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.OnDocumentPrintPageBegin(PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs)">
            <summary>
            Event that occurs when printing of the document page begins.
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.OnDocumentPrintPageEnd(PdfPrintingNet.PdfPrint.DocumentPrintPageEventArgs)">
            <summary>
            Event that occurs when printing of the document page ends.
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.OnDocumentPrintBegin(PdfPrintingNet.PdfPrint.DocumentPrintBeginEventArgs)">
            <summary>
            Event that occurs when printing of the document begins.
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.OnDocumentPrintEnd(PdfPrintingNet.PdfPrint.DocumentPrintEndEventArgs)">
            <summary>
            Event that occurs when printing of the document begins.
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.OpenDocument(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Opens the document.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="password">The password.</param>
            <param name="showPasswordForm">if true and password is required it will show form to enter password</param>
            <param name="showStatusMessage">if true and document wasn't loaded correctly it will display error status message</param>
            <returns>Status of file open.</returns>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.OpenDocument(System.Byte[],System.String,System.Boolean,System.Boolean)">
            <summary>
            Opens the document.
            </summary>
            <param name="pdfContent">Content of the PDF.</param>
            <param name="password">The password.</param>
            <param name="showPasswordForm">if true and password is required it will show form to enter password</param>
            <param name="showStatusMessage">if true and document wasn't loaded correctly it will display error status message</param>
            <returns>Status of file open.</returns>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.OpenDocument">
            <summary>
            Opens the document by showing Open File Dialog. If password required it will show form to enter password.
            </summary>
            <returns>Status of open PDF action</returns>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SaveDocument">
            <summary>
            Saves the currently opened document by showing Save File Dialog.
            </summary>
            <param name="fileName">Name of the PDF document to be saved.</param>        
            <returns>Status of save PDF action</returns>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SaveDocument(System.String,System.String)">
            <summary>
            Saves the document.
            </summary>
            <param name="fileName">Name of the PDF document to be saved.</param>
            <param name="outputFileName">Path to the output PDF document</param>
            <returns>Status of save PDF action</returns>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SaveDocument(System.Byte[],System.String)">
            <summary>
            Saves the document.
            </summary>
            <param name="pdfContent">Content of the PDF document to be saved.</param>
            <param name="outputFileName">Path to the output PDF document</param>
            <returns>Status of save PDF action</returns>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SendDocumentInEmail">
            <summary>
            Send already loaded PDF document in email.
            </summary>        
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SendDocumentInEmail(System.String)">
            <summary>
            Send PDF document in email.
            </summary>
            <param name="fileName">Name of the PDF document to be sent.</param>        
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SendDocumentInEmail(System.Byte[],System.String)">
            <summary>
            Send PDF document in email.
            </summary>
            <param name="pdfContent">Content of the PDF document to be sent.</param>
            <param name="attachmentName">Name of the attachment file. Optional. If not set, temporary name will be generated.</param>        
        </member>
        <member name="M:PdfViewerNet.PdfViewer.OnDocumentLoaded(PdfViewerNet.DocumentLoadedEventArgs)">
            <summary>
            Occurs when document is loaded.
            </summary>
            <param name="e">Document loaded arguments</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.OnDocumentSaved(PdfViewerNet.DocumentSavedEventArgs)">
            <summary>
            Occurs when document is saved.
            </summary>
            <param name="e">Document loaded arguments</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.CloseDocument">
            <summary>
            Closes the document.
            </summary>        
        </member>
        <member name="M:PdfViewerNet.PdfViewer.Print">
            <summary>
            Shows PrintDialog and prints loaded document if document has Print permissions.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.ShowDocumentInfo">
            <summary>
            Shows the document information.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.Rotate(System.Boolean)">
            <summary>
            Rotates the specified document.
            </summary>
            <param name="isClockwise">if true it will rotate clockwise otherwise counter clockwise.</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.ZoomIn">
            <summary>
            Zooms document to next available bigger zoom level. If already is maximal zoom level it doesn't happen anything.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.ZoomOut">
            <summary>
            Zooms out document to closest available smaller zoom level. If already is minimal zoom level it doesn't happen anything.
            </summary>
            
        </member>
        <member name="M:PdfViewerNet.PdfViewer.GetAvailableZoomLevels">
            <summary>
            Gets the available zoom levels.
            </summary>
            <returns>List of available zoom levels</returns>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.GetMinZoomLevel">
            <summary>
            Gets the minimum zoom level.
            </summary>
            <returns>Minimum zoom level in percentage.</returns>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.GetMaxZoomLevel">
            <summary>
            Gets the maximum zoom level.
            </summary>
            <returns>Maximum zoom level in percentage.</returns>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.OnZoomChanged(PdfViewerNet.ZoomEventArgs)">
            <summary>
            Occurs when document zoom level is changed.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Overrides CmdKey
            </summary>
            <param name="msg">Message</param>
            <param name="keyData">Key data</param>
            <returns>true if key is processed, otherwise false</returns>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.GoToPage(System.Int32)">
            <summary>
            Opens and display selected page.
            </summary>
            <param name="pageNumber">The page number.</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.GoToPreviousPage">
            <summary>
            Goes to previous page.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.GoToNextPage">
            <summary>
            Goes to next page.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.GoToLastPage">
            <summary>
            Goes to last page.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.GoToFirstPage">
            <summary>
            Goes to first page.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.GoToPreviousVisitedPage">
            <summary>
            Goes to previous visited page.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.GoToNextVisitedPage">
            <summary>
            Goes to next visited page.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.OnCurrentPageChanged(PdfViewerNet.CurrentPageEventArgs)">
            <summary>
            Occurs when current displayed page is changed.
            </summary>
            <param name="e">Event parameters</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SearchNext(System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches for the next occurrence of search text.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="isCaseSensitive">if true search operation will be case sensitive</param>
            <param name="wholeWordOnly">if true only whole word will be found</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SearchPrevious(System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches for the previous occurrence of search text.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="isCaseSensitive">if true search operation will be case sensitive</param>
            <param name="wholeWordOnly">if true only whole word will be found</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.ResetSearch">
            <summary>
            Resets the search.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SelectAllText">
            <summary>
            Selects all text in PDF document.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SelectAllText(System.Int32)">
            <summary>
            Selects all text in PDF document.
            </summary>
            <param name="pageNumber">The page number where to select all text</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.DeselectAllText">
            <summary>
            Deselects all selected text in PDF document.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.CopySelectedContentToClipboard">
            <summary>
            Copies the selected content to clipboard.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.GetSelectedText">
            <summary>
            Gets the selected text.
            </summary>
            <returns>Text if selected, empty string if nothing is selected</returns>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.GetSelectedImage">
            <summary>
            Gets the selected image.
            </summary>
            <returns>Image if selected, null if nothing is selected</returns>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.OnSelectionChanged(PdfViewerNet.SelectionEventArgs)">
            <summary>
            Occurs when selection changes.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SelectToolbarZoomField">
            <summary>
            If toolbar is visible selects toolbar zoom field.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SelectToolbarSearchField">
            <summary>
            If toolbar is visible selects toolbar search field.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SelectToolbarPageNumberField">
            <summary>
            If toolbar is visible selects toolbar page number field.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SetLicenseInfo(System.String,System.String)">
            <summary>
            Sets the license information.
            </summary>
            <param name="companyName">Name of the company.</param>
            <param name="licenseKey">The license key.</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SetWPFParentLocation(System.Int32,System.Int32)">
            <summary>
            Set WPF parent form location. Used for correctly showing progress bar.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.SetWPFParentSize(System.Int32,System.Int32)">
            <summary>
            Set WPF parent form dimension. Used for correctly showing progress bar.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="F:PdfViewerNet.PdfViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.PdfViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:PdfViewerNet.PdfViewer.IsCalledFromWPF">
            <summary>
            Used when called from WPF application. Default is false.
            </summary>
        </member>
        <member name="E:PdfViewerNet.PdfViewer.DocumentPrintBegin">
            <summary>
            Document print begin event
            </summary>
        </member>
        <member name="E:PdfViewerNet.PdfViewer.DocumentPrintEnd">
            <summary>
            Document print end event
            </summary>
        </member>
        <member name="E:PdfViewerNet.PdfViewer.DocumentPrintPageBegin">
            <summary>
            Document print page begin event
            </summary>
        </member>
        <member name="E:PdfViewerNet.PdfViewer.DocumentPrintPageEnd">
            <summary>
            Document print page end event
            </summary>
        </member>
        <member name="E:PdfViewerNet.PdfViewer.DocumentLoaded">
            <summary>
            Occurs when document is loaded.
            </summary>
        </member>
        <member name="E:PdfViewerNet.PdfViewer.DocumentSaved">
            <summary>
            Occurs when document is saved.
            </summary>
        </member>
        <member name="P:PdfViewerNet.PdfViewer.IsDocumentLoaded">
            <summary>
            Is document loaded.
            </summary>
            <returns>True if document is loaded, otherwise false</returns>
        </member>
        <member name="P:PdfViewerNet.PdfViewer.NumberOfPages">
            <summary>
            Number of pages in loaded PDF document
            </summary>  
            <returns>number of pdf page in loaded document. If document isn't loaded it returns 0.</returns>      
        </member>
        <member name="P:PdfViewerNet.PdfViewer.CurrentPageNumber">
            <summary>
            Current page number in loaded PDF document
            </summary>        
            <returns>Current page number in loaded document. If document isn't loaded it returns 0.</returns>   
        </member>
        <member name="P:PdfViewerNet.PdfViewer.TableOfContent">
            <summary>
            Table of content of loaded document. It can be null if not present.
            </summary>        
        </member>
        <member name="P:PdfViewerNet.PdfViewer.DocumentPermissions">
            <summary>
            Document permissions of loaded PDF document.
            </summary>        
        </member>
        <member name="P:PdfViewerNet.PdfViewer.DocumentProperties">
            <summary>
            Document properties of loaded PDF document.
            </summary>        
        </member>
        <member name="P:PdfViewerNet.PdfViewer.IsToolbarVisible">
            <summary>
            Gets or sets a value indicating whether toolbar is visible.
            </summary>
            <returns>True if toolbar is visible.</returns>
        </member>
        <member name="P:PdfViewerNet.PdfViewer.SelectionDisabled">
            <summary>
            Disable selection of text and images. Even if false it document permission doesn't allow selection selection will be disabled.
            </summary>        
        </member>
        <member name="P:PdfViewerNet.PdfViewer.SelectionColor">
            <summary>
            Gets or sets the color of the selection.
            </summary>    
        </member>
        <member name="P:PdfViewerNet.PdfViewer.BorderColor">
            <summary>
            Border color of area where PDF document is displayed.
            </summary>
        </member>
        <member name="P:PdfViewerNet.PdfViewer.BackgroundColor">
            <summary>
            Gets or sets the color of the viewer background.
            </summary>       
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarBackgroundColor">
            <summary>
            Gets or sets the color of the toolbar background.
            </summary>        
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ViewType">
            <summary>
            Gets or sets the type of the display page type.
            </summary>     
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarTooltipVisible">
            <summary>
            Gets or sets if tooltip is visible on the toolbar.
            </summary>     
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarSearchVisible">
            <summary>
            Show search field in toolbar
            </summary>       
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarDocumentInfoVisible">
            <summary>
            Show document info button in toolbar.
            </summary>      
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarBookmarkVisible">
            <summary>
            Show bookmarks button in toolbar.
            </summary>        
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarVisitedPagesVisible">
            <summary>
            Show buttons in toolbar for navigating through visited pages.
            </summary>        
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarRotateVisible">
            <summary>
            Show buttons in toolbar for rotation.
            </summary>       
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarPageVisible">
            <summary>
            Show fields and buttons in toolbar related to pages.
            </summary>        
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarZoomVisible">
            <summary>
            Show zoom field and buttons in toolbar.
            </summary>      
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarEmailVisible">
            <summary>
            Show email buttons in toolbar.
            </summary>      
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarSaveVisible">
            <summary>
            Show save buttons in toolbar.
            </summary>      
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarOpenVisible">
            <summary>
            Show button Open in toolbar.
            </summary>        
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarPrintVisible">
            <summary>
            Show button Print in toolbar.
            </summary>      
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ToolbarPageViewTypeVisible">
            <summary>
            Show buttons in toolbar for changing display type of pages.
            </summary>      
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ShowBookmarks">
            <summary>
            Show bookmarks if available.
            </summary>
        </member>
        <member name="P:PdfViewerNet.PdfViewer.DisableParentShortcuts">
            <summary>
            Disable parent shortcuts already defined in the PdfViewer?
            </summary>
        </member>
        <member name="P:PdfViewerNet.PdfViewer.DisablePdfViewerShortcuts">
            <summary>
            Disable shortcuts defined in the PdfViewer
            </summary>
        </member>
        <member name="P:PdfViewerNet.PdfViewer.DisablePrinting">
            <summary>
            Disable printing
            </summary>
        </member>
        <member name="P:PdfViewerNet.PdfViewer.ZoomValue">
            <summary>
            Gets or sets the zoom value in percentage. For actual size set 100.
            </summary>        
        </member>
        <member name="P:PdfViewerNet.PdfViewer.FitToPageZoomValue">
            <summary>
            Gets zoom percentage at what PDF page is fit to current PDF display area.
            </summary>                
        </member>
        <member name="E:PdfViewerNet.PdfViewer.ZoomChanged">
            <summary>
            Occurs when document zoom level is changed.
            </summary>
        </member>
        <member name="P:PdfViewerNet.PdfViewer.VisitedPages">
            <summary>
            List of visited pages.
            </summary>
        </member>
        <member name="P:PdfViewerNet.PdfViewer.CurrentVisitedPageIndex">
            <summary>
            Gets the index of the current visited page.
            </summary>
        </member>
        <member name="E:PdfViewerNet.PdfViewer.CurrentPageChanged">
            <summary>
            Occurs when current displayed page is changed.
            </summary>
        </member>
        <member name="E:PdfViewerNet.PdfViewer.SelectionChanged">
            <summary>
            Occurs when selection changes.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfWatermark">
            <summary>
            Watermark on printed PDF document
            </summary>
        </member>
        <member name="M:PdfPrintingNet.PdfWatermark.#ctor">
            <summary>
            Constructor. Creates PdfWatermark object with default values.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfWatermark.Image">
            <summary>
            If set, it will draw image at X,Y at angle of RotationAngle property.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfWatermark.X">
            <summary>
            Absolute or relative X position. It is related with UseRelativeCoordinates.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfWatermark.Y">
            <summary>
            Absolute or relative Y position. It is related with UseRelativeCoordinates.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfWatermark.UseRelativeCoordinates">
            <summary>
            If set to true than X and Y are in percentage of paper size.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfWatermark.RotationAngle">
            <summary>
            Rotation angle of watermark.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfWatermark.TextFont">
            <summary>
            Watermark text font used for drawing value of Text property.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfWatermark.Text">
            <summary>
            Is set, it will draw text at X,Y at angle of RotationAngle propery.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfWatermark.TextColor">
            <summary>
            Color of watermark text.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfWatermark.IsSet">
            <summary>
            Returns true or false - based on that if Image or Text for watermark is set.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfWatermark.Opacity">
            <summary>
            Opacity value in percentage - 0 is invisible and at 100 isn't transparent at all.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfPrintingNet.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfPrintingNet.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.NativeMethods.FS_MATRIX">
            <summary>
            Represents the transformation matrices
            </summary>
            <remarks>
            To understand the mathematics of coordinate transformations in PDF, it is vital to remember two points: 
            <list type="bullet">
            <item>Transformations alter coordinate systems, not graphics objects. All objects painted before a transformation is applied are unaffected by the transformation. Objects painted after the transformation is applied are interpreted in the transformed coordinate system. </item>
            <item>Transformation matrices specify the transformation from the new (transformed) coordinate system to the original (untransformed) coordinate system. All coordinates used after the transformation are expressed in the transformed coordinate system. PDF applies the transformation matrix to find the equivalent coordinates in the untransformed coordinate system. </item>
            </list>
            <note type="note">Many computer graphics textbooks consider transformations of graphics objects rather than of coordinate systems. Although either approach is correct and selfconsistent, some details of the calculations differ depending on which point of view is taken. </note>
            <para>PDF represents coordinates in a two-dimensional space. The point (x, y) in such a space can be expressed in vector form as [x y 1]. The constant third element of this vector (1) is needed so that the vector can be used with 3-by-3 matrices in the calculations described below. </para>
            <para>The transformation between two coordinate systems is represented by a 3-by-3 transformation matrix written as follows:</para>
            <pre>
            |a b 0|
            |c d 0|
            |e f 1|
            </pre>
            <para>Because a transformation matrix has only six elements that can be changed, it is usually specified in PDF as the six-element array [a b c d e f ]. </para>
            <para>Coordinate transformations are expressed as matrix multiplications:</para>
            <pre>
                                       |a b 0|
            [ x′ y′ 1 ] =  [ x y 1 ] x |c d 0|
                                       |e f 1|
            </pre>
            <para>
            Because PDF transformation matrices specify the conversion from the transformed coordinate system to the 
            original (untransformed) coordinate system, x′ and y′ in this equation are the coordinates in the untransformed coordinate system,
            and x and y are the coordinates in the transformed system. The multiplication is carried out as follows:
            </para>
            <pre>
            x′ = a × x + c × y + e
            y′ = b × x + d × y + f
            </pre>
            <para>If a series of transformations is carried out, the matrices representing each of the individual transformations can be multiplied together to produce a single equivalent matrix representing the composite transformation</para>
            <para>
            Matrix multiplication is not commutative — the order in which matrices are multiplied is significant. Consider a sequence of two transformations: a scaling transformation 
            applied to the user space coordinate system, followed by a conversion from the resulting scaled user space to device space. Let Ms be the matrix specifying 
            the scaling and Mc the current transformation matrix, which transforms user space to device space. Recalling that coordinates are always specified in the transformed
            space, the correct order of transformations must first convert the scaled coordinates to default user space and then the default user space coordinates to device space. This can be expressed as 
            </para>
            <pre>
            Xd = Xu × Mc  = (Xs × Ms) × Mc = Xs × (Ms × Mc)
            </pre>
            where
            <pre>
            Xd denotes the coordinates in device space<markup><br /></markup>
            Xu denotes the coordinates in default user space<markup><br /></markup>
            Xs denotes the coordinates in scaled user space 
            </pre>
            <para>This shows that when a new transformation is concatenated with an existing one, the matrix representing it must be multiplied before (premultiplied with) the existing transformation matrix. </para>
            <para>This result is true in general for PDF: when a sequence of transformations is carried 
            out, the matrix representing the combined transformation (M′) is calculated
            by premultiplying the matrix representing the additional transformation (Mt)
            with the one representing all previously existing transformations (M): </para>
            <pre>
            M′ = Mt × M
            </pre>
            <note type="note">When rendering graphics objects, it is sometimes necessary for an application
            to perform the inverse of a transformation—that is, to find the user space coordinates
            that correspond to a given pair of device space coordinates. Not all transformations
            are invertible, however. For example, if a matrix contains a, b, c, and d
            elements that are all zero, all user coordinates map to the same device coordinates
            and there is no unique inverse transformation. Such noninvertible transformations
            are not very useful and generally arise from unintended operations, such as scaling
            by 0. Use of a noninvertible matrix when painting graphics objects can result in unpredictable behavior.</note>
            </remarks>
        </member>
        <member name="F:PdfPrintingNet.NativeMethods.FS_MATRIX.a">
            <summary>
            Coefficient a.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.NativeMethods.FS_MATRIX.b">
            <summary>
            Coefficient b.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.NativeMethods.FS_MATRIX.c">
            <summary>
            Coefficient c.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.NativeMethods.FS_MATRIX.d">
            <summary>
            Coefficient d.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.NativeMethods.FS_MATRIX.e">
            <summary>
            Coefficient e.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.NativeMethods.FS_MATRIX.f">
            <summary>
            Coefficient f.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.Destination">
            <summary>
            Destination of link in PDF document
            </summary>
        </member>
        <member name="M:PdfPrintingNet.Destination.#ctor(PdfPrintingNet.PdfDestination,PdfPrintingNet.PdfAction)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPrintingNet.Destination"/> class.
            </summary>
            <param name="destination">The destination within PDF document.</param>
            <param name="action">The action.</param>
        </member>
        <member name="P:PdfPrintingNet.Destination.Type">
            <summary>
            Destination type could be Unsupported, ScrollToPage, LaunchApplication, ExternalDoc, ExecuteUrl
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Destination.Value">
            <summary>
            Destination value - action url or named destination within PDF document.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Destination.PageNumber">
            <summary>
            Page number of destination PDF page.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfDestination">
            <summary>
            Destination within PDF document.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfDestination.Handle">
            <summary>
            Gets or sets the PdfDestination handle.
            </summary>       
        </member>
        <member name="P:PdfPrintingNet.PdfDestination.Name">
            <summary>
            Gets or sets the name of destination.
            </summary>        
        </member>
        <member name="P:PdfPrintingNet.PdfDestination.PageNumber">
            <summary>
            Gets or sets the page number of PDF page destination.
            </summary>        
        </member>
        <member name="T:PdfPrintingNet.DestinationType">
            <summary>
            Destination type
            </summary>
        </member>
        <member name="F:PdfPrintingNet.DestinationType.ScrollToPage">
            <summary>
            Scroll to page
            </summary>
        </member>
        <member name="F:PdfPrintingNet.DestinationType.LaunchApplication">
            <summary>
            Launch external application
            </summary>
        </member>
        <member name="F:PdfPrintingNet.DestinationType.ExecuteURL">
            <summary>
            Execute URL
            </summary>
        </member>
        <member name="F:PdfPrintingNet.DestinationType.ExternalDoc">
            <summary>
            External document
            </summary>
        </member>
        <member name="F:PdfPrintingNet.DestinationType.Unsupported">
            <summary>
            Unsupported
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfAction">
            <summary>
            Executed action when link is clicked.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfAction.Handle">
            <summary>
            Gets or sets the action handle.
            </summary>       
        </member>
        <member name="P:PdfPrintingNet.PdfAction.ActionURL">
            <summary>
            Gets or sets the action URL.
            </summary>        
        </member>
        <member name="P:PdfPrintingNet.PdfAction.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfAction.Type">
            <summary>
            Gets or sets the action type.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfAction.ActionType">
            <summary>
            List of possible Action types.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfAction.ActionType.Unsupported">
            <summary>
            Unsupported action type
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfAction.ActionType.CurrentDoc">
            <summary>
            Go to a destination within current document.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfAction.ActionType.ExternalDoc">
            <summary>
            Go to a destination within another document
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfAction.ActionType.Uri">
            <summary>
            Universal Resource Identifier, including web pages and other Internet based resources
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfAction.ActionType.Application">
            <summary>
            Launch an application or open a file
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfBookmark">
            <summary>
            Pdf bookmark
            </summary>
        </member>
        <member name="M:PdfPrintingNet.PdfBookmark.#ctor(PdfPrintingNet.PdfDestination,PdfPrintingNet.PdfAction)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfPrintingNet.PdfBookmark"/> class.
            </summary>
            <param name="destination">The destination.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:PdfPrintingNet.PdfBookmark.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:PdfPrintingNet.PdfBookmark.Handle">
            <summary>
            Gets or sets the handle.
            </summary>       
        </member>
        <member name="P:PdfPrintingNet.PdfBookmark.Title">
            <summary>
            Gets the title.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfBookmark.Children">
            <summary>
            Gets the bookmark children.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfBookmark.Destination">
            <summary>
            Gets the destination.
            </summary>        
        </member>
        <member name="T:PdfPrintingNet.PdfBookmarkCollection">
            <summary>
            Collection of PdfBookmarks
            </summary>    
        </member>
        <member name="T:PdfPrintingNet.PdfDocument">
            <summary>
            Provides functionality to render a PDF document.
            </summary>
        </member>
        <member name="M:PdfPrintingNet.PdfDocument.Load(System.String,System.String)">
            <summary>
            Initializes a new instance of the PdfDocument class with the provided path.
            </summary>
            <param name="path"></param>
            <param name="password"></param>
        </member>
        <member name="M:PdfPrintingNet.PdfDocument.Load(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the PdfDocument class with the provided stream.
            </summary>
            <param name="pdfArray"></param>
            <param name="password"></param>
        </member>
        <member name="F:PdfPrintingNet.PdfDocument._formHandle">
            <summary>
            Size of each page in the PDF document.
            </summary>
        </member>
        <member name="M:PdfPrintingNet.PdfDocument.Render(System.Int32,System.Drawing.Graphics,System.Single,System.Single,System.Drawing.Rectangle,System.Boolean,PdfPrintingNet.PdfRotation)">
            <summary>
            Renders a page of the PDF document to the provided graphics instance.
            </summary>
            <param name="pageNumber">Number of the page to render.</param>
            <param name="graphics">Graphics instance to render the page on.</param>
            <param name="dpiX">Horizontal DPI.</param>
            <param name="dpiY">Vertical DPI.</param>
            <param name="bounds">Bounds to render the page in.</param>        
            <param name="forPrinting">Render the page for printing.</param>
            <param name="pdfRotation">Rotation of the PDF</param>
        </member>
        <member name="M:PdfPrintingNet.PdfDocument.Render(System.Int32,System.Drawing.Graphics,System.Single,System.Single,System.Drawing.Rectangle,PdfPrintingNet.PdfRenderFlags,PdfPrintingNet.PdfRotation)">
            <summary>
            Renders a page of the PDF document to the provided graphics instance.
            </summary>
            <param name="pageNumber">Number of the page to render.</param>
            <param name="graphics">Graphics instance to render the page on.</param>
            <param name="dpiX">Horizontal DPI.</param>
            <param name="dpiY">Vertical DPI.</param>
            <param name="bounds">Bounds to render the page in.</param>       
            <param name="flags">Flags used to influence the rendering.</param>
            <param name="pdfRotation">Rotation of the PDF</param>
        </member>
        <member name="M:PdfPrintingNet.PdfDocument.Render(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            Renders a page of the PDF document to an image.
            </summary>
            <param name="pageNumber">Number of the page to render.</param>
            <param name="width">Width of the rendered image.</param>
            <param name="height">Height of the rendered image.</param>
            <param name="dpiX">Horizontal DPI.</param>
            <param name="dpiY">Vertical DPI.</param>
            <param name="forPrinting">Render the page for printing.</param>
            <returns>The rendered image.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfDocument.Render(System.Int32,System.Int32,System.Int32,System.Single,System.Single,PdfPrintingNet.PdfRenderFlags)">
            <summary>
            Renders a page of the PDF document to an image.
            </summary>
            <param name="pageNumber">Number of the page to render.</param>
            <param name="width">Width of the rendered image.</param>
            <param name="height">Height of the rendered image.</param>
            <param name="dpiX">Horizontal DPI.</param>
            <param name="dpiY">Vertical DPI.</param>
            <param name="flags">Flags used to influence the rendering.</param>
            <returns>The rendered image.</returns>
        </member>
        <member name="M:PdfPrintingNet.PdfDocument.CreatePrintDocument">
            <summary>
            Creates a <see cref="T:System.Drawing.Printing.PrintDocument"/> for the PDF document.
            </summary>        
            <returns></returns>
        </member>
        <member name="P:PdfPrintingNet.PdfDocument.Handle">
            <summary>
            Gets or sets the handle.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfDocument.Bookmarks">
            <summary>
            Bookmarks stored in this PdfFile
            </summary>
        </member>
        <member name="P:PdfPrintingNet.PdfDocument.DocumentProperties">
            <summary>
            Gets the document properties.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfRenderFlags">
            <summary>
            Flags that influence the page rendering process.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfRenderFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfRenderFlags.ForPrinting">
            <summary>
            Render for printing.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfRenderFlags.Annotations">
            <summary>
            Set if annotations are to be rendered.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfRenderFlags.LcdText">
            <summary>
            Set if using text rendering optimized for LCD display.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfRenderFlags.NoNativeText">
            <summary>
            Don't use the native text output available on some platforms.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfRenderFlags.Grayscale">
            <summary>
            Grayscale output.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfRenderFlags.LimitImageCacheSize">
            <summary>
            Limit image cache size.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfRenderFlags.ForceHalftone">
            <summary>
            Always use halftone for image stretching.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfRenderFlags.Transparent">
            <summary>
            Render with a transparent background.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.PdfRotation">
            <summary>
            Specifies the rotation of pages shown in the PDF renderer.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfRotation.Rotate0">
            <summary>
            Rotates the output 0 degrees.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfRotation.Rotate90">
            <summary>
            Rotates the output 90 degrees.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfRotation.Rotate180">
            <summary>
            Rotates the output 180 degrees.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.PdfRotation.Rotate270">
            <summary>
            Rotates the output 270 degrees.
            </summary>
        </member>
        <member name="T:PdfPrintingNet.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.bookmark_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.bookmark_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.bookmark_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.bookmark_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.cancel_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.cancel_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.cancel_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.cancel_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.clockwise_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.clockwise_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.clockwise_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.clockwise_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.clpm20">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.clpm40">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.counterclockwise_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.counterclockwise_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.counterclockwise_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.counterclockwise_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.documentinfo_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.documentinfo_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.documentinfo_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.documentinfo_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.email_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.email_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.email_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.email_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.en32c">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.en64c">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.multipage_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.multipage_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.multipage_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.multipage_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.nextfind_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.nextfind_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.nextfind_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.nextfind_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.nextpage_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.nextpage_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.nextpage_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.nextpage_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.nextview_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.nextview_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.nextview_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.nextview_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.open_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.open_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.open_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.open_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.options_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.options_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.options_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.options_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.previousfind_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.previousfind_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.previousfind_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.previousfind_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.previouspage_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.previouspage_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.previouspage_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.previouspage_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.previousview_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.previousview_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.previousview_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.previousview_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.print_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.print_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.print_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.print_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.save_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.save_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.save_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.save_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.search_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.search_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.search_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.search_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.select_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.select_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.select_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.select_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.singlepage_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.singlepage_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.singlepage_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.singlepage_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.zoomin_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.zoomin_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.zoomin_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.zoomin_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.zoomout_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.zoomout_disabled">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.zoomout_focus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:PdfPrintingNet.Properties.Resources.zoomout_hover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="F:PdfPrintingNet.TimeOutMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfPrintingNet.TimeOutMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfPrintingNet.TimeOutMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:PdfViewerNet.TWPDFViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:PdfViewerNet.TWPDFViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PdfViewerNet.TWPDFViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PdfViewerNet.PageViewType">
            <summary>
            PageViewType
            </summary>
        </member>
        <member name="F:PdfViewerNet.PageViewType.Single">
            <summary>
            The single
            </summary>
        </member>
        <member name="F:PdfViewerNet.PageViewType.Continuous">
            <summary>
            The continuous
            </summary>
        </member>
        <member name="T:PdfViewerNet.ZoomEventArgs">
            <summary>
            Zoom Event Arguments
            </summary>    
        </member>
        <member name="M:PdfViewerNet.ZoomEventArgs.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the ZoomEventArgs class.
            </summary>
            <param name="zoomLevel">The zoom level.</param>
        </member>
        <member name="P:PdfViewerNet.ZoomEventArgs.ZoomLevel">
            <summary>
            Gets or sets the zoom level.
            </summary>
        </member>
        <member name="T:PdfViewerNet.SelectionType">
            <summary>
            Selection Type
            </summary>
        </member>
        <member name="F:PdfViewerNet.SelectionType.Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="F:PdfViewerNet.SelectionType.Image">
            <summary>
            The image
            </summary>
        </member>
        <member name="T:PdfViewerNet.SelectionEventArgs">
            <summary>
            Selection Event Arguments
            </summary>    
        </member>
        <member name="M:PdfViewerNet.SelectionEventArgs.#ctor(System.Int32,PdfViewerNet.SelectionType)">
            <summary>
            Initializes a new instance of the SelectionEventArgs class.
            </summary>
            <param name="count">The count.</param>
            <param name="selectionType">Type of the selection.</param>
        </member>
        <member name="P:PdfViewerNet.SelectionEventArgs.SelectedCount">
            <summary>
            Gets or sets the selected count.
            </summary>
        </member>
        <member name="P:PdfViewerNet.SelectionEventArgs.SelectionType">
            <summary>
            Gets or sets the type of the selection.
            </summary>        
        </member>
        <member name="T:PdfViewerNet.DocumentLoadedEventArgs">
            <summary>
            Document Loaded Event Arguments
            </summary>    
        </member>
        <member name="M:PdfViewerNet.DocumentLoadedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DocumentLoadedEventArgs class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:PdfViewerNet.DocumentLoadedEventArgs.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="T:PdfViewerNet.DocumentSavedEventArgs">
            <summary>
            Document Saved Event Arguments
            </summary>    
        </member>
        <member name="M:PdfViewerNet.DocumentSavedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DocumentSavedEventArgs class.
            </summary>
            <param name="fileName">Name of the original file name. Empty if it was byte[]</param>
            <param name="newFileName">Name of the new file name. It can be the same as fileName.</param>
        </member>
        <member name="P:PdfViewerNet.DocumentSavedEventArgs.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="P:PdfViewerNet.DocumentSavedEventArgs.NewFileName">
            <summary>
            Gets or sets the new name of the file.
            </summary>
        </member>
        <member name="T:PdfViewerNet.CurrentPageEventArgs">
            <summary>
            Current Page Event Arguments
            </summary>    
        </member>
        <member name="M:PdfViewerNet.CurrentPageEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CurrentPageEventArgs class.
            </summary>
            <param name="currentPage">The current page.</param>
        </member>
        <member name="P:PdfViewerNet.CurrentPageEventArgs.CurrentPage">
            <summary>
            Gets or sets the current page.
            </summary>
        </member>
    </members>
</doc>
